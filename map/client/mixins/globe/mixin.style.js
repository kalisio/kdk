import Cesium from 'cesium/Source/Cesium.js'
import _ from 'lodash'
import chroma from 'chroma-js'
import { convertToCesiumFromSimpleStyleSpec, convertToCesiumObjects, CesiumEntityTypes } from '../../utils.globe.js'

export const style = {
  methods: {
    applyStyle (entities, options) {
      for (let i = 0; i < entities.values.length; i++) {
        const entity = entities.values[i]
        const style = this.generateStyle('entityStyle', entity, options)
        // Loop over possible types
        CesiumEntityTypes.forEach(type => {
          if (entity[type] && style[type]) {
            _.merge(entity[type], style[type])
          }
        })
        // Specific case of 3D models that can be used to replace default billboards generated by cesium
        if (style.model && entity.billboard) {
          entity.billboard = undefined
          entity.model = style.model
        }
        // Handle specific case of orientation
        if (style.orientation) entity.orientation = style.orientation
      }
    },
    applyClusterStyle (entities, cluster, options) {
      const style = this.generateStyle('clusterStyle', entities, cluster, options)
      // Loop over possible styles
      const featureTypes = ['billboard', 'label', 'point']
      featureTypes.forEach(type => {
        if (_.has(cluster, type)) {
          _.merge(cluster[type], style[type])
        }
      })
    },
    // Alias to ease development
    convertFromSimpleStyleSpec (style, inPlace) {
      return convertToCesiumFromSimpleStyleSpec(style, inPlace)
    },
    // Alias to ease development
    convertToCesiumObjects (style) {
      return convertToCesiumObjects(style)
    },
    getDefaultEntityStyle (entity, options) {
      const properties = (entity.properties ? entity.properties.getValue(0) : null)
      const cesiumOptions = options.cesium || options
      let style = _.merge({}, _.get(this, 'activityOptions.engine.entityStyle'))
      // We allow to template entity style properties according to feature,
      // because it can be slow you have to specify a subset of properties
      const entityStyleTemplate = _.get(cesiumOptions, 'entityStyleTemplate')
      if (entityStyleTemplate) {
        const entityStyle = _.cloneDeep(cesiumOptions.entityStyle)
        entityStyleTemplate.forEach(entry => {
          // Perform templating, set using simple spec mapping first then raw if property not found
          let value = entry.compiler({ properties, chroma })
          const property = entry.property
          // Handle specific case of orientation
          if ((property === 'orientation') && entity.position) {
            const localFrameAxes = _.get(entityStyle, 'localFrameAxes', ['east', 'north'])
            const localFrame = Cesium.Transforms.localFrameToFixedFrameGenerator(...localFrameAxes)
            const position = entity.position.getValue(this.viewer.clock.currentTime)
            // From heading, pitch, roll as templated string to quaternion
            value = value.split(',').map(angle => Cesium.Math.toRadians(parseFloat(angle)))
            value = new Cesium.HeadingPitchRoll(...value)
            // Then from local to position frame
            value = Cesium.Transforms.headingPitchRollQuaternion(position, value, Cesium.Ellipsoid.WGS84, localFrame)
          }
          _.set(entityStyle, property, value)
        })
        // In this case we perform conversion to Cesium objects once templating has occured
        style = _.merge(style, this.convertToCesiumObjects(entityStyle))
      } else {
        // In this case the conversion to Cesium objects has already occured on layer creation
        style = _.merge(style, cesiumOptions.entityStyle || {})
      }
      if (properties && properties.entityStyle) _.merge(style, this.convertToCesiumObjects(properties.entityStyle))
      return style
    },
    getDefaultClusterStyle (entities, cluster, options) {
      const cesiumOptions = options.cesium || options
      const style = _.merge({},
        _.get(this, 'activityOptions.engine.clusterStyle'),
        cesiumOptions.clusterStyle || {})
      // Look for templated options
      if (_.has(style, 'label.text')) {
        const compiler = _.template(_.get(style, 'label.text'))
        // To avoid erasing of initial value due to reference, duplicate
        const labelStyle = _.cloneDeep(_.get(style, 'label'))
        _.set(labelStyle, 'text', compiler({ entities, cluster, $t: this.$t }))
        _.set(style, 'label', labelStyle)
      }
      return style
    }
  },
  created () {
    this.registerStyle('entityStyle', this.getDefaultEntityStyle)
    this.registerStyle('clusterStyle', this.getDefaultClusterStyle)
  },
  // Need to be done after created as the activity mixin initializes options in it
  beforeMount () {
    // Perform required conversion from JSON to Cesium objects
    if (_.has(this, 'activityOptions.engine.entityStyle')) {
      _.set(this, 'activityOptions.engine.entityStyle', this.convertToCesiumObjects(_.get(this, 'activityOptions.engine.entityStyle')))
    }
    if (_.has(this, 'activityOptions.engine.clusterStyle')) {
      _.set(this, 'activityOptions.engine.clusterStyle', this.convertToCesiumObjects(_.get(this, 'activityOptions.engine.clusterStyle')))
    }
  }
}
