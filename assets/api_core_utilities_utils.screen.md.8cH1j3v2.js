import{_ as e,c as s,o as i,V as a}from"./chunks/framework.MC2QjGNi.js";const g=JSON.parse('{"title":"Screen","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/utilities/utils.screen.md","filePath":"api/core/utilities/utils.screen.md"}'),t={name:"api/core/utilities/utils.screen.md"},n=a('<h1 id="screen" tabindex="-1">Screen <a class="header-anchor" href="#screen" aria-label="Permalink to &quot;Screen&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <code>utils.screen.js</code> module provides helper functions for handling responsive width, height, and fullscreen operations in a KDK-based application.</p><p>It utilizes <strong>Lodash</strong>, <strong>Vue&#39;s reactive references</strong>, and <strong>Quasar&#39;s Screen &amp; Fullscreen APIs</strong>.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="fullscreen" tabindex="-1"><code>Fullscreen</code> <a class="header-anchor" href="#fullscreen" aria-label="Permalink to &quot;`Fullscreen`&quot;">​</a></h3><p>A reactive reference that tracks whether the application is in fullscreen mode.</p><ul><li><strong>Type:</strong> <code>Ref&lt;boolean&gt;</code></li><li><strong>Source:</strong> Derived from <code>AppFullscreen.isActive</code></li></ul><h3 id="computeresponsivewidth-width" tabindex="-1"><code>computeResponsiveWidth(width)</code> <a class="header-anchor" href="#computeresponsivewidth-width" aria-label="Permalink to &quot;`computeResponsiveWidth(width)`&quot;">​</a></h3><p>Computes a responsive width based on the screen size or a percentage value.</p><ul><li><strong>Parameters:</strong><ul><li><code>width</code> <em>(number | object)</em>: Can be an absolute number, percentage, or an object with breakpoint-based values.</li></ul></li><li><strong>Returns:</strong> Computed width in pixels or <code>undefined</code> if invalid.</li></ul><h3 id="computeresponsiveheight-height" tabindex="-1"><code>computeResponsiveHeight(height)</code> <a class="header-anchor" href="#computeresponsiveheight-height" aria-label="Permalink to &quot;`computeResponsiveHeight(height)`&quot;">​</a></h3><p>Computes a responsive height based on the screen size or a percentage value.</p><ul><li><strong>Parameters:</strong><ul><li><code>height</code> <em>(number | object)</em>: Can be an absolute number, percentage, or an object with breakpoint-based values.</li></ul></li><li><strong>Returns:</strong> Computed height in pixels or <code>undefined</code> if invalid.</li></ul><h3 id="computeresponsivesize-size" tabindex="-1"><code>computeResponsiveSize(size)</code> <a class="header-anchor" href="#computeresponsivesize-size" aria-label="Permalink to &quot;`computeResponsiveSize(size)`&quot;">​</a></h3><p>Computes a responsive size (width &amp; height) based on screen dimensions.</p><ul><li><strong>Parameters:</strong><ul><li><code>size</code> <em>(array | object)</em>: Can be an array <code>[width, height]</code> or an object with breakpoint-based values.</li></ul></li><li><strong>Returns:</strong> An array <code>[computedWidth, computedHeight]</code> or <code>undefined</code> if invalid.</li></ul><h3 id="getorientation" tabindex="-1"><code>getOrientation()</code> <a class="header-anchor" href="#getorientation" aria-label="Permalink to &quot;`getOrientation()`&quot;">​</a></h3><p>Determines the current screen orientation.</p><ul><li><strong>Returns:</strong> <code>&#39;portrait&#39;</code> if height is greater than width, otherwise <code>&#39;landscape&#39;</code>.</li></ul><h3 id="togglefullscreen" tabindex="-1"><code>toggleFullscreen()</code> <a class="header-anchor" href="#togglefullscreen" aria-label="Permalink to &quot;`toggleFullscreen()`&quot;">​</a></h3><p>Toggles the application&#39;s fullscreen mode.</p><ul><li><strong>Returns:</strong> A promise that resolves <code>true</code> if successful, or rejects with <code>false</code> if an error occurs.</li></ul><h3 id="lockorientation-orientation" tabindex="-1"><code>lockOrientation(orientation)</code> <a class="header-anchor" href="#lockorientation-orientation" aria-label="Permalink to &quot;`lockOrientation(orientation)`&quot;">​</a></h3><p>Locks the screen orientation if the browser supports it.</p><ul><li><strong>Parameters:</strong><ul><li><code>orientation</code> <em>(string)</em>: The desired orientation (<code>&#39;portrait&#39;</code>, <code>&#39;landscape&#39;</code>, etc.).</li></ul></li><li><strong>Returns:</strong> A promise that resolves when locking is successful.</li></ul><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { computeResponsiveWidth, toggleFullscreen } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils.screen.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> computeResponsiveWidth</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Gets 50% of screen width</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">`Computed Width: ${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">width</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}px`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">try</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toggleFullscreen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Fullscreen mode toggled&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (error) {</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Failed to toggle fullscreen mode&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, error);</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>',28),o=[n];function r(l,h,p,c,d,k){return i(),s("div",null,o)}const E=e(t,[["render",r]]);export{g as __pageData,E as default};
