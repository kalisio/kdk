import{_ as s,c as i,o as e,V as t}from"./chunks/framework.MC2QjGNi.js";const a="/kdk/assets/marker-cluster-3D.aNsyTpKT.png",n="/kdk/assets/great-circle-3D.N4xNC7fF.png",l="/kdk/assets/wall-3D.xP2Jab_I.png",m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"api/map/globe-mixins.md","filePath":"api/map/globe-mixins.md"}'),r={name:"api/map/globe-mixins.md"},o=t(`<h2 id="globe-mixins" tabindex="-1">Globe Mixins <a class="header-anchor" href="#globe-mixins" aria-label="Permalink to &quot;Globe Mixins&quot;">​</a></h2><p>The underlying globe object is based on <a href="https://cesium.com/" target="_blank" rel="noreferrer">Cesium</a>.</p><h2 id="base-globe" tabindex="-1">Base Globe <a class="header-anchor" href="#base-globe" aria-label="Permalink to &quot;Base Globe&quot;">​</a></h2><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>This mixin is a mandatory one to build a globe activity</p></div><p>Make it possible to manage globe layers and extend supported layer types:</p><ul><li><strong>setupGlobe(domElement, token, options)</strong> creates the underlying Cesium globe object with given Cesium Ion token and viewer options</li><li><strong>addLayer(options)/removeLayer(name)</strong> registers/destroys a layer based on a <a href="./services.html#catalog-service">catalog layer descriptor</a></li><li><strong>showLayer/hideLayer(name)</strong> (un)hides the given layer in globe, on first show the layer will be lazily created</li><li><strong>hasLayer(name)</strong> check if a given layer is already registered</li><li><strong>isLayerVisible(name)</strong> check if a given layer is visible and underlying Cesium object created</li><li><strong>zoomToLayer(name)</strong> fits the globe view to visualize a given layer</li><li><strong>zoomToBounds(bounds)</strong> fits the globe view to visualize a given extent as bounds [ [south, west], [north, east] ]</li><li><strong>getLayerByName(name)</strong> retrieve the <a href="./services.html#catalog-service">catalog layer descriptor</a> for a given layer</li><li><strong>renameLayer(previousName, newName)</strong> rename a given layer</li><li><strong>removeLayer(name)</strong> destroys a given layer</li><li><strong>getCesiumLayerByName(name)</strong> retrieve the underlying Cesium object for a given layer</li><li><strong>createCesiumLayer(options)</strong> creates the underlying Cesium object based on a <a href="./services.html#catalog-service">catalog layer descriptor</a>, will check all registered constructor for any one matching</li><li><strong>registerCesiumConstructor(constructor)</strong> registers a Cesium constructor function for a given type of layer</li><li><strong>center(longitude, latitude, altitude, heading, pitch, roll, options)</strong> centers the globe view to visualize a given point at a given altitude with and orientation (default is pointing ground vertically [0, 0, -90]), some options like an animation <code>duration</code> can also be added</li><li><strong>getCenter()</strong> get the current globe view center as longitude, latitude and altitude</li><li><strong>getBounds()</strong> get the current map view bounds as <code>[ [south, west], [north, east] ]</code></li></ul><p>This mixin also adds the following internal data properties:</p><ul><li><strong>layers</strong> available layers as <a href="./services.html#catalog-service">catalog layer descriptors</a></li></ul><h2 id="globe-style" tabindex="-1">Globe Style <a class="header-anchor" href="#globe-style" aria-label="Permalink to &quot;Globe Style&quot;">​</a></h2><p>Make it possible to setup Cesium entities objects with style based on (Geo)Json (feature) properties stored in entities:</p><ul><li><strong>convertFromSimpleStyleSpec(style)</strong> helper function to convert from <a href="https://github.com/mapbox/simplestyle-spec" target="_blank" rel="noreferrer">simple style spec options</a> to <a href="https://cesium.com/learn/cesiumjs/ref-doc/GeoJsonDataSource.html#.LoadOptions" target="_blank" rel="noreferrer">Cesium style options</a></li><li><strong>convertToCesiumObjects(style)</strong> helper function to convert from JSON description to Cesium objects</li></ul><p>Use <strong>register/unregisterStyle(type, generator)</strong> to (un)register a function generating a Cesium object depending on the given type:</p><ul><li><code>entityStyle</code> =&gt; <strong>f(entity, options)</strong> returns a <a href="https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/" target="_blank" rel="noreferrer">Cesium entity style object</a></li><li><code>clusterStyle</code> =&gt; <strong>f(entities, cluster, options)</strong> returns a <a href="https://cesium.com/learn/cesiumjs/ref-doc/EntityCluster.html#.newClusterCallback" target="_blank" rel="noreferrer">Cesium cluster style object</a></li></ul><p>The mixin automatically registers defaults styling:</p><ul><li><code>entityStyle</code> =&gt; will create a style based on the following options merged with the following order of precedence <ul><li><a href="https://github.com/mapbox/simplestyle-spec" target="_blank" rel="noreferrer">simple style spec options</a> set on <strong>feature.style</strong> or <strong>feature.properties</strong></li><li><a href="https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/" target="_blank" rel="noreferrer">Cesium entity style options</a> set on layer descriptor</li><li><a href="https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/" target="_blank" rel="noreferrer">Cesium entity style options</a> set on the <strong>entityStyle</strong> property in the component options</li></ul></li><li><code>clusterStyle</code> =&gt; will create a style based on the following options merged with the following order of precedence <ul><li><a href="https://cesium.com/learn/cesiumjs/ref-doc/EntityCluster.html#.newClusterCallback" target="_blank" rel="noreferrer">Cesium cluster style options</a> set on layer descriptor</li><li><a href="https://cesium.com/learn/cesiumjs/ref-doc/EntityCluster.html#.newClusterCallback" target="_blank" rel="noreferrer">Cesium cluster style options</a> set on the <strong>clusterStyle</strong> property in the component options</li></ul></li></ul><p>Cesium styles often rely on dynamically created objects while the input styling configuration is a static JSON. As a consequence the following rules are used to convert from JSON to Cesium objects:</p><ul><li>constants are expressed as strings starting with <code>&#39;Cesium.&#39;</code></li><li>object instances are expressed as a <code>{ type, options }</code> object where type is a string starting with <code>&#39;Cesium.&#39;</code> followed by the class name like <code>&#39;Cesium.CheckerboardMaterialProperty&#39;</code>, options are constructor options for the object instance The following Cesium code:</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ellipse.material </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cesium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">CheckerboardMaterialProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  evenColor : Cesium.Color.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">WHITE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  oddColor : Cesium.Color.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">BLACK</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  repeat : </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">new</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Cesium.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Cartesian2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><p>will result in the following Json configuration:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ellipse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  material</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cesium.CheckerboardMaterialProperty&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      evenColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cesium.Color.WHITE&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      oddColor</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cesium.Color.BLACK&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      repeat</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Cesium.Cartesian2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">        options</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="globe-popup" tabindex="-1">Globe Popup <a class="header-anchor" href="#globe-popup" aria-label="Permalink to &quot;Globe Popup&quot;">​</a></h2><p>Make it possible to generate <a href="https://cesium.com/learn/cesiumjs/ref-doc/LabelGraphics.html" target="_blank" rel="noreferrer">Cesium labels</a> as popups based on GeoJson feature properties stored in entities. Use <strong>register/unregisterStyle(<code>popup</code>, generator)</strong> to (un)register a function <strong>f(entity, options)</strong> returning a <a href="https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/" target="_blank" rel="noreferrer">Cesium entity style object</a></p><p>The mixin automatically registers a default generator that will create a popup displaying a property name/value table based on the following options with the following order of precedence</p><ul><li><strong>popup</strong>: set on <strong>entity.properties</strong> or layer descriptor or in the <strong>popup</strong> property of component options <ul><li><strong>pick</strong>: array of property names to appear in the popup</li><li><strong>omit</strong>: array of property names not to appear in the popup</li><li><strong>template</strong>: <a href="https://lodash.com/docs/#template" target="_blank" rel="noreferrer">Lodash template</a> to generate popup content with <code>feature</code>, its <code>properties</code> and translation function <code>$t</code> as context</li><li><strong>html</strong>: HTML content of the popup, if provided will override default display</li><li><strong>options</strong>: Cesium <a href="https://cesium.com/learn/cesiumjs/ref-doc/LabelGraphics.html" target="_blank" rel="noreferrer">label options</a></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to disable a default popup configuration like <code>popup: { }</code> (i.e. display all properties) on a per-layer basis you have to explicitely unset it on your layer options using <code>popup: null</code> or <code>popup: false</code>.</p></div><h2 id="globe-tooltip" tabindex="-1">Globe Tooltip <a class="header-anchor" href="#globe-tooltip" aria-label="Permalink to &quot;Globe Tooltip&quot;">​</a></h2><p>Make it possible to generate <a href="https://cesium.com/learn/cesiumjs/ref-doc/LabelGraphics.html" target="_blank" rel="noreferrer">Cesium labels</a> as tooltips based on GeoJson feature properties stored in entities. Use <strong>register/unregisterStyle(<code>tooltip</code>, generator)</strong> to (un)register a function <strong>f(entity, options)</strong> returning a <a href="https://cesium.com/learn/cesiumjs-learn/cesiumjs-creating-entities/" target="_blank" rel="noreferrer">Cesium entity style object</a></p><p>The mixin automatically registers a default generator that will create a tooltip based on the following options with the following order of precedence</p><ul><li><strong>tooltip</strong>: set on <strong>entity.properties</strong> or layer descriptor or in the <strong>tooltip</strong> property of component options <ul><li><strong>property</strong>: property name to appear in the tooltip</li><li><strong>template</strong>: <a href="https://lodash.com/docs/#template" target="_blank" rel="noreferrer">Lodash template</a> to generate tooltip content with <code>feature</code>, its <code>properties</code> and translation function <code>$t</code> as context</li><li><strong>html</strong>: HTML content of the tooltip, if provided will override default display</li><li><strong>options</strong>: Cesium <a href="https://cesium.com/learn/cesiumjs/ref-doc/LabelGraphics.html" target="_blank" rel="noreferrer">label options</a></li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>If you want to disable a default tooltip configuration like <code>tooltip: { property: &#39;name&#39; }</code> (i.e. display all properties) on a per-layer basis you have to explicitely unset it on your layer options using <code>tooltip: null</code> or <code>tooltip: false</code>.</p></div><h2 id="geojson-layer" tabindex="-1">GeoJson Layer <a class="header-anchor" href="#geojson-layer" aria-label="Permalink to &quot;GeoJson Layer&quot;">​</a></h2><p>Make it possible to manage and style raw or time-based GeoJson map layers:</p><ul><li><strong>createCesiumGeoJsonLayer(options)</strong> automatically registered GeoJson Cesium layer constructor</li><li><strong>updateLayer(name, geoJson)</strong> update underlying GeoJson data of a given layer</li></ul><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>The <a href="./mixins.html#globe-style">style mixin</a> is mandatory when using this mixin. If you&#39;d like to support popups/tooltips you should also use the <a href="./mixins.html#globe-tooltip">popup mixin</a> and/or <a href="./mixins.html#globe-tooltip">tooltip mixin</a>.</p></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>Marker cluster options are to be provided in the <strong>cluster</strong> property of the Cesium layer options</p></div><p>The following configuration illustrates a GeoJson marker cluster layer using options set on the layer descriptor (see image below):</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Layer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  description</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;My sites&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  tags</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [ </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;business&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ],</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  icon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;star&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  attribution</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;(c) My company&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;OverlayLayer&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  cesium</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;geoJson&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    source</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;https://s3.eu-central-1.amazonaws.com/kargo/nuclear-sites.json&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    cluster</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">      pixelRange</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">50</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;marker-symbol&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;star&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    &#39;marker-color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#FFA500&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p><img src="`+a+'" alt="3D marker cluster"></p><h3 id="additional-feature-types" tabindex="-1">Additional feature types <a class="header-anchor" href="#additional-feature-types" aria-label="Permalink to &quot;Additional feature types&quot;">​</a></h3><p>The following options can be set as feature <code>properties</code> to manage more geometry types:</p><ul><li><strong>wall</strong> boolean set to <code>true</code> on a <code>LineString</code> will result in an additional <a href="https://cesium.com/learn/cesiumjs/ref-doc/WallGraphics.html" target="_blank" rel="noreferrer">WallGraphics</a>, which uses the styling options of the feature</li><li><strong>corridor</strong> boolean set to <code>true</code> on a <code>LineString</code> will result in a <a href="https://cesium.com/learn/cesiumjs/ref-doc/CorridorGraphics.html" target="_blank" rel="noreferrer">CorridorGraphics</a> instead, which uses the styling options of the feature</li><li><strong>geodesic</strong> boolean set to <code>true</code> on a <code>Point</code> will result in a great circle represented as a <a href="https://cesium.com/learn/cesiumjs/ref-doc/EllipseGraphics.html" target="_blank" rel="noreferrer">EllipseGraphics</a>, which <strong>radius</strong> must be specified in meters and uses the styling options of the feature</li><li><strong>icon-text</strong> string set on a <code>Point</code> will result in a <a href="https://cesium.com/learn/cesiumjs/ref-doc/LabelGraphics.html" target="_blank" rel="noreferrer">LabelGraphics</a> instead of a <a href="https://cesium.com/learn/cesiumjs/ref-doc/BillboardGraphics.html" target="_blank" rel="noreferrer">BillboardGraphics</a>, which uses the styling options of the feature</li></ul><p><img src="'+n+'" alt="Geodesic feature type"></p><p><img src="'+l+`" alt="Wall feature type"></p><h3 id="dynamic-styling" tabindex="-1">Dynamic styling <a class="header-anchor" href="#dynamic-styling" aria-label="Permalink to &quot;Dynamic styling&quot;">​</a></h3><p>The same than for <a href="./map-mixins.html#dynamic-styling">dynamic map style</a> applies for globe. Note however that templating will be applied once the 3D entities have been created, which means that you cannot use templating on <a href="https://github.com/mapbox/simplestyle-spec" target="_blank" rel="noreferrer">simple style spec options</a> but rather on Cesium object options set on the <code>entityStyle</code> layer option.</p><p>For instance you can change the marker color or image based on a given features&#39;s property like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">entityStyle</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  billboard</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`&lt;% if (properties.visibility &lt; 75) { %&gt;/statics/windyblack.png&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else if (properties.visibility &lt; 300) { %&gt;/statics/windyred.png&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else if (properties.visibility &lt; 1500) { %&gt;/statics/windyorange.png&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else if (properties.visibility &lt; 3000) { %&gt;/statics/windyyellow.png&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else { %&gt;/statics/windygreen.png&lt;% } %&gt;\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    color</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`Cesium.Color.&lt;% if (properties.visibility &lt; 75) { %&gt;BLACK&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else if (properties.visibility &lt; 300) { %&gt;ORANGERED&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else if (properties.visibility &lt; 1500) { %&gt;GOLD&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else if (properties.visibility &lt; 3000) { %&gt;YELLOW&lt;% }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">              else { %&gt;LIMEGREEN&lt;% } %&gt;&quot;/&gt;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  template</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;billboard.image&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;billboard.color&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>You can also draw a path with a different styling on each part like this:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;FeatureCollection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  features</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    properties: { stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#000000&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weight: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    geometry: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LineString&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coordinates: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Feature&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    properties: { stroke: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;#FF00FF&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, weight: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    geometry: { type: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;LineString&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, coordinates: [</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h2 id="file-layer" tabindex="-1">File Layer <a class="header-anchor" href="#file-layer" aria-label="Permalink to &quot;File Layer&quot;">​</a></h2><p>Make it possible to drag&#39;n&#39;drop GeoJson or KML file on the globe. It will automatically create a new <a href="./globe-mixins.html#geojson-layer">GeoJson layer</a> named after the filename on drop. As a consequence it has to be used with the GeoJson layer mixin and will use the configured styling.</p><h2 id="globe-activity" tabindex="-1">Globe Activity <a class="header-anchor" href="#globe-activity" aria-label="Permalink to &quot;Globe Activity&quot;">​</a></h2><p>Make it easier to create 3D mapping activities:</p><ul><li><strong>initializeGlobe(token)</strong> setup the render engine with given Cesium ion access token, <strong>should be called first before any other method</strong></li><li><strong>finalizeGlobe()</strong> destroy the render engine</li></ul><div class="danger custom-block"><p class="custom-block-title">DANGER</p><p>It assumes that the DOM element used by the render engine has a ref named <code>globe</code></p></div>`,55),p=[o];function h(k,c,g,d,y,E){return e(),i("div",null,p)}const b=s(r,[["render",h]]);export{m as __pageData,b as default};
