import{_ as s,c as i,o as a,V as e}from"./chunks/framework.MC2QjGNi.js";const t="/kdk/assets/kano-3D.nOXzH0pd.png",m=JSON.parse('{"title":"Overview","description":"","frontmatter":{},"headers":[],"relativePath":"api/map/introduction.md","filePath":"api/map/introduction.md"}'),n={name:"api/map/introduction.md"},l=e('<h1 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h1><p>The map module includes basic features to create web mapping applications: <a href="./services.html#geocoder-service">geocoding</a>, <a href="./services.html#catalog-service">data catalog</a>, <a href="./services.html#feature-service">dynamic feature layers</a>, <a href="./components.html#map">2D visualisation</a>, <a href="./components.html#globe">3D visualisation</a>.</p><p><img src="'+t+`" alt="3D web mapping application built with the KDK"></p><h2 id="utilities" tabindex="-1">Utilities <a class="header-anchor" href="#utilities" aria-label="Permalink to &quot;Utilities&quot;">​</a></h2><h3 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h3><p>Here are a set of utility functions:</p><ul><li><strong>generatePropertiesSchema (geoJson, name)</strong> generate a JSON schema from the given GeoJson features</li><li><strong>fetchGeoJson (dataSource, processor)</strong> fetch GeoJson features from the given source and apply processor function (if any) on each feature</li><li><strong>getNearestTime (time, times)</strong> find the nearest time of a given one in a given moment time list</li><li><strong>getTimeInterval (times, mode = &#39;minimum&#39;)</strong> find the minimum or maximum time interval in a given moment time list</li></ul><h3 id="store-objects" tabindex="-1">Store objects <a class="header-anchor" href="#store-objects" aria-label="Permalink to &quot;Store objects&quot;">​</a></h3><p>The <code>locationFormat</code> property of the <a href="./../core/application.html#store">global store</a> is used to have a shared location display format accross all mapping components with a dedicated UI to change settings using e.g. <code>store.patch(&#39;locationFormat&#39;, &#39;FFf&#39;)</code>.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The location format object to be used for display supports <a href="https://github.com/nerik/formatcoords" target="_blank" rel="noreferrer">formatcoords</a>.</p></div><p>The <code>timeFormat</code> property of the <a href="./../core/application.html#store">global store</a> is used to have a shared time display format accross all mapping components with a dedicated UI to change settings using e.g.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;timeFormat&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  time: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    short: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;H[h]&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    long: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;HH:mm&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  date: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    short: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;DD/MM&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    long: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;dddd D&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  year: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    short: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;YY&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    long: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;YYYY&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  utc: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  locale: utils.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getLocale</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>The time format object properties to be used for display supports <a href="https://momentjs.com/docs/#/displaying/format/" target="_blank" rel="noreferrer">momentjs formats</a>.</p></div><p>In addition, the <a href="./../core/application.html#store">global store</a> contains the following defaults objects:</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">selection</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  location</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: current picked position on map,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  feature</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: currently selected feature on map,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  layer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: source layer </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">of</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> currently selected feature</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default view settings</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">restore</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  view</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  layers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default timeline parameters</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeline</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  step</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">60</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 1H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Default timeseries parameters</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">timeseries</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  span</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1440</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 24H</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="geolocation" tabindex="-1">Geolocation <a class="header-anchor" href="#geolocation" aria-label="Permalink to &quot;Geolocation&quot;">​</a></h3><p>Your component can automatically retrieve the user&#39;s location on initialization or when he has logged in (the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Geolocation_API" target="_blank" rel="noreferrer">Geolocation API</a> is used under-the-hood). The position, respectively error, is available in the <code>position</code>, respectively <code>error</code>, property of the <code>geolocation</code> object in the <a href="./../core/application.html#store">global store</a>.</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { Geolocation } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;@kalisio/kdk/map.client&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Launch a geolocation</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Geolocation.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">update</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> position</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$store.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;geolocation.position&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,18),p=[l];function h(o,r,k,c,d,E){return a(),i("div",null,p)}const y=s(n,[["render",h]]);export{m as __pageData,y as default};
