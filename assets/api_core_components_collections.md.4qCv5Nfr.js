import{_ as e,c as o,o as t,V as s}from"./chunks/framework.MC2QjGNi.js";const n="/kdk/assets/kgrid-pagination.7q74kk7D.png",r="/kdk/assets/kgrid-infinite-scroll.Z8Z6jrao.png",a="/kdk/assets/kgrid-header-footer.QX0q6-i3.png",i="/kdk/assets/kgrid-layout.HNW76Zd7.png",k=JSON.parse('{"title":"Collections","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/components/collections.md","filePath":"api/core/components/collections.md"}'),l={name:"api/core/components/collections.md"},c=s('<h1 id="collections" tabindex="-1">Collections <a class="header-anchor" href="#collections" aria-label="Permalink to &quot;Collections&quot;">​</a></h1><p><strong>Collections</strong> are specialized components used to render collection of objects.</p><p>The <strong>KDK</strong> provides a set of pre-built <strong>Collections</strong> components. These components are based on the <a href="./../composables.html#usecollection">useCollection</a> composable which can also be used to develop your own <strong>Collection</strong> components.</p><h2 id="pre-built-collections" tabindex="-1">Pre-built Collections <a class="header-anchor" href="#pre-built-collections" aria-label="Permalink to &quot;Pre-built Collections&quot;">​</a></h2><h3 id="kgrid" tabindex="-1">KGrid <a class="header-anchor" href="#kgrid" aria-label="Permalink to &quot;KGrid&quot;">​</a></h3><p>The <strong>KGrid</strong> component provides two different ways to render a collection: using <em>pagination</em> or <em>infinite scroll</em>.</p><ul><li><p><code>pagination</code> mode</p><p><img src="'+n+'" alt="KGrid"></p><p>The items are rendered page per page and the <strong>Pagination</strong> part enables the user to navigate though the pages. It is implemented using the <strong>Quasar</strong> <a href="https://quasar.dev/vue-components/pagination" target="_blank" rel="noreferrer">Pagination</a> component.</p></li><li><p><code>infinite scroll</code> mode</p><p><img src="'+r+'" alt="KGrid"></p><p>The items are rendered as long as the user scroll down. In that mode, two buttons are displayed :</p><ul><li>a <strong>Scroll down</strong> which is displayed as long as there are items to be loaded.</li><li>a <strong>Scroll to top</strong> which allows the user to return to the top of the page.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>These buttons can be hidden if needed.</p></div></li></ul><p>In both modes, the <strong>KGrid</strong> component let you provide a <strong>Header</strong> or <strong>Footer</strong> which are implemented using a <strong>KPanel</strong>:</p><p><img src="'+a+'" alt="KGrid Header/Footer"></p><p>Regarding the items, the <strong>KGrid</strong> component, rely on a <strong>Renderer</strong> to render an item. A <strong>Renderer</strong> is an abstract objet that define:</p><ul><li><p>the component used to render each item, called <a href="./items.html">Items</a> component</p></li><li><p>the <em>props</em> to be applied to the <strong>Item</strong> component</p></li><li><p>the <em>layout</em> to be used to render the items. By default, the items are rendered using a <strong>Grid</strong> layout. But you can easily define the layout you desire using <strong>Quasar</strong> <a href="https://quasar.dev/layout/grid/row#responsive-classes" target="_blank" rel="noreferrer">responsive classes</a>. For example, assigning the <code>class=&quot;col-12&quot;</code> to the renderer allows you to display the items as a <strong>List</strong>.</p><p><img src="'+i+'" alt="KGrid layouts"></p></li></ul><h3 id="ktable" tabindex="-1">KTable <a class="header-anchor" href="#ktable" aria-label="Permalink to &quot;KTable&quot;">​</a></h3><p><em>TODO</em></p><h3 id="ktimeline" tabindex="-1">KTimeLine <a class="header-anchor" href="#ktimeline" aria-label="Permalink to &quot;KTimeLine&quot;">​</a></h3><p><em>TODO</em></p><h2 id="custom-collections" tabindex="-1">Custom Collections <a class="header-anchor" href="#custom-collections" aria-label="Permalink to &quot;Custom Collections&quot;">​</a></h2>',16),d=[c];function p(h,m,g,u,b,_){return t(),o("div",null,d)}const T=e(l,[["render",p]]);export{k as __pageData,T as default};
