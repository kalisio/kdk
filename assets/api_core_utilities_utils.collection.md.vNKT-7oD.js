import{_ as e,c as i,o as t,V as s}from"./chunks/framework.MC2QjGNi.js";const u=JSON.parse('{"title":"Collection","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/utilities/utils.collection.md","filePath":"api/core/utilities/utils.collection.md"}'),a={name:"api/core/utilities/utils.collection.md"},l=s('<h1 id="collection" tabindex="-1">Collection <a class="header-anchor" href="#collection" aria-label="Permalink to &quot;Collection&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <code>utils.collection.js</code> module provides utility functions for interacting with collections in a KDK-based application.</p><p>It leverages <strong>Lodash</strong> for object manipulation and <strong>FeathersJS</strong> services to perform database operations efficiently.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="getcollectionservice-name-context" tabindex="-1"><code>getCollectionService(name, context)</code> <a class="header-anchor" href="#getcollectionservice-name-context" aria-label="Permalink to &quot;`getCollectionService(name, context)`&quot;">​</a></h3><p>Retrieves a service instance for a specified collection.</p><ul><li><strong>Parameters:</strong><ul><li><code>name</code> <em>(string)</em>: The name of the collection service.</li><li><code>context</code> <em>(object)</em>: The context in which the service operates.</li></ul></li><li><strong>Returns:</strong> The requested service instance.</li></ul><h3 id="listitems-service-fields-filter-limit-50" tabindex="-1"><code>listItems(service, fields, filter = {}, limit = 50)</code> <a class="header-anchor" href="#listitems-service-fields-filter-limit-50" aria-label="Permalink to &quot;`listItems(service, fields, filter = {}, limit = 50)`&quot;">​</a></h3><p>Fetches a list of items from a given service, applying optional filters and field selection.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(object)</em>: The service instance to query.</li><li><code>fields</code> <em>(array)</em>: The fields to select in the query.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li><li><code>limit</code> <em>(number, optional, default=50)</em>: The maximum number of items to retrieve.</li></ul></li><li><strong>Returns:</strong> A promise resolving to the list of retrieved items.</li></ul><h3 id="getoldestitem-service-field-createdat-filter" tabindex="-1"><code>getOldestItem(service, field = &#39;createdAt&#39;, filter = {})</code> <a class="header-anchor" href="#getoldestitem-service-field-createdat-filter" aria-label="Permalink to &quot;`getOldestItem(service, field = &#39;createdAt&#39;, filter = {})`&quot;">​</a></h3><p>Retrieves the oldest item from a service based on a specified field.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(object)</em>: The service instance to query.</li><li><code>field</code> <em>(string, optional, default=&#39;createdAt&#39;)</em>: The field used to determine the oldest item.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise resolving to the oldest item.</li></ul><h3 id="getoldesttime-service-field-createdat-filter" tabindex="-1"><code>getOldestTime(service, field = &#39;createdAt&#39;, filter = {})</code> <a class="header-anchor" href="#getoldesttime-service-field-createdat-filter" aria-label="Permalink to &quot;`getOldestTime(service, field = &#39;createdAt&#39;, filter = {})`&quot;">​</a></h3><p>Retrieves the timestamp of the oldest item from a service based on a specified field.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(object)</em>: The service instance to query.</li><li><code>field</code> <em>(string, optional, default=&#39;createdAt&#39;)</em>: The field used to determine the oldest timestamp.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise resolving to the timestamp of the oldest item.</li></ul><h3 id="getlatestitem-service-field-createdat-filter" tabindex="-1"><code>getLatestItem(service, field = &#39;createdAt&#39;, filter = {})</code> <a class="header-anchor" href="#getlatestitem-service-field-createdat-filter" aria-label="Permalink to &quot;`getLatestItem(service, field = &#39;createdAt&#39;, filter = {})`&quot;">​</a></h3><p>Retrieves the latest item from a service based on a specified field.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(object)</em>: The service instance to query.</li><li><code>field</code> <em>(string, optional, default=&#39;createdAt&#39;)</em>: The field used to determine the latest item.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise resolving to the latest item.</li></ul><h3 id="getlatesttime-service-field-createdat-filter" tabindex="-1"><code>getLatestTime(service, field = &#39;createdAt&#39;, filter = {})</code> <a class="header-anchor" href="#getlatesttime-service-field-createdat-filter" aria-label="Permalink to &quot;`getLatestTime(service, field = &#39;createdAt&#39;, filter = {})`&quot;">​</a></h3><p>Retrieves the timestamp of the latest item from a service based on a specified field.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(object)</em>: The service instance to query.</li><li><code>field</code> <em>(string, optional, default=&#39;createdAt&#39;)</em>: The field used to determine the latest timestamp.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise resolving to the timestamp of the latest item.</li></ul><h3 id="getdistinctvalues-service-field-filter" tabindex="-1"><code>getDistinctValues(service, field, filter = {})</code> <a class="header-anchor" href="#getdistinctvalues-service-field-filter" aria-label="Permalink to &quot;`getDistinctValues(service, field, filter = {})`&quot;">​</a></h3><p>Retrieves a list of distinct values for a specified field in a collection.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(object)</em>: The service instance to query.</li><li><code>field</code> <em>(string)</em>: The field for which distinct values are required.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise resolving to an array of unique values.</li></ul><h2 id="example-usage" tabindex="-1">Example usage <a class="header-anchor" href="#example-usage" aria-label="Permalink to &quot;Example usage&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { getCollectionService, listItems } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils.collection.js&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> service</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> getCollectionService</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;myCollection&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, context)</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> items</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listItems</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(service, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;name&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;age&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">], { active: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Active items:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, items)</span></span></code></pre></div><h3 id="searchtext-service-text-casesensitive-false-diacriticsensitive-false-filter" tabindex="-1"><code>searchText(service, text, caseSensitive = false, diacriticSensitive = false, filter = {})</code> <a class="header-anchor" href="#searchtext-service-text-casesensitive-false-diacriticsensitive-false-filter" aria-label="Permalink to &quot;`searchText(service, text, caseSensitive = false, diacriticSensitive = false, filter = {})`&quot;">​</a></h3><p>Searches for a given text in a service using a [$text}(<a href="https://www.mongodb.com/docs/manual/reference/operator/query/text/" target="_blank" rel="noreferrer">https://www.mongodb.com/docs/manual/reference/operator/query/text/</a>) query.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(Object)</em> – The service to perform the search on.</li><li><code>text</code> <em>(String)</em> – The text to search for.</li><li><code>caseSensitive</code> <em>(Boolean, optional, default: <code>false</code>)</em> – Whether the search should be case-sensitive.</li><li><code>diacriticSensitive</code> <em>(Boolean, optional, default: <code>false</code>)</em> – Whether the search should be diacritic-sensitive.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise that resolves to the search results.</li></ul><h2 id="example-usage-1" tabindex="-1">Example usage <a class="header-anchor" href="#example-usage-1" aria-label="Permalink to &quot;Example usage&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> results</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> searchText</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(myService, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;example&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(results)</span></span></code></pre></div><p>:::<br><code>$text</code> performs a text query on the content of the fields indexed with a <a href="https://www.mongodb.com/docs/manual/core/indexes/index-types/index-text/#std-label-index-type-text" target="_blank" rel="noreferrer">text index</a>. :::</p><h3 id="containstext-service-field-text-casesensitive-false-diacriticsensitive-false-filter" tabindex="-1"><code>containsText(service, field, text, caseSensitive = false, diacriticSensitive = false, filter = {})</code> <a class="header-anchor" href="#containstext-service-field-text-casesensitive-false-diacriticsensitive-false-filter" aria-label="Permalink to &quot;`containsText(service, field, text, caseSensitive = false, diacriticSensitive = false, filter = {})`&quot;">​</a></h3><p>Checks if a specific field in the search results contains the exact text.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(Object)</em> – The service to perform the search on.</li><li><code>field</code> <em>(String)</em> – The field to check in the search results.</li><li><code>text</code> <em>(String)</em> – The text to match against.</li><li><code>caseSensitive</code> <em>(Boolean, optional, default: <code>false</code>)</em> – Whether the search should be case-sensitive.</li><li><code>diacriticSensitive</code> <em>(Boolean, optional, default: <code>false</code>)</em> – Whether the search should be diacritic-sensitive.</li><li><code>filter</code> <em>(Object, optional, default <code>{}</code>)</em> – Additional query filters.</li></ul></li><li><strong>Returns:</strong> A promise that resolves to <code>true</code> if an exact match is found, otherwise <code>false</code>.</li></ul>',37),r=[l];function o(c,n,d,h,p,m){return t(),i("div",null,r)}const g=e(a,[["render",o]]);export{u as __pageData,g as default};
