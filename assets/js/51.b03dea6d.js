(window.webpackJsonp=window.webpackJsonp||[]).push([[51],{587:function(s,a,t){"use strict";t.r(a);var e=t(13),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"infrastructure"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#infrastructure"}},[s._v("#")]),s._v(" Infrastructure")]),s._v(" "),t("h2",{attrs:{id:"docker"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#docker"}},[s._v("#")]),s._v(" Docker")]),s._v(" "),t("p",[s._v("Check why Docker service does not start:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("systemctl status docker.service\ndockerd\n")])])]),t("p",[s._v("Remove untaged/intermediate images generated by builds:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker rmi "),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("$(")]),s._v("docker images "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"<none>"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("awk")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{print $3}'")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v(")")])]),s._v("\n")])])]),t("p",[s._v("Follow-up logs while running a container:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker logs container_name -f --tail "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v("\n")])])]),t("p",[s._v("Get detailed healthcheck status for a running container:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker inspect -f "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{json .State.Health.Status}}'")]),s._v(" container_name\n")])])]),t("p",[s._v("Find the location of the log file of a container:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker inspect --format"),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token string"}},[s._v("'{{.LogPath}}'")]),s._v(" container_name\n")])])]),t("p",[s._v("Find the location of a named volume of a container:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker volume inspect volume_name\n")])])]),t("p",[s._v("Export the logs with errors in a file:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker logs aktnmap "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" aktnmap.log "),t("span",{pre:!0,attrs:{class:"token operator"}},[t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("2")]),s._v(">")]),t("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[s._v("&1")]),s._v("\n")])])]),t("p",[s._v("Quick container fix:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("// Perform configuration changes inside the container "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exit")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("exec")]),s._v(" -it container_name "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("bash")]),s._v("\n// Or copy configuration files to "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("host")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("then")]),s._v(" back to container\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" container_name:/conf/config_file "),t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v(".")]),s._v("\n// Edit config "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("file")]),s._v("\ndocker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("cp")]),s._v(" config_file container_name:/conf\ndocker commit container_name repository:tag\ndocker-compose down "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\ndocker-compose up "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("..")]),s._v(".\n")])])]),t("p",[s._v("Check why a swarm service did not start (empty logs, no replica):")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("docker "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("service")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("ps")]),s._v(" --no-trunc "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("serviceName"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),t("p",[s._v("To access host in Docker Desktop Edition on "),t("a",{attrs:{href:"https://docs.docker.com/docker-for-windows/networking/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Windows"),t("OutboundLink")],1),s._v(" or "),t("a",{attrs:{href:"https://docs.docker.com/docker-for-mac/networking/",target:"_blank",rel:"noopener noreferrer"}},[s._v("Mac"),t("OutboundLink")],1),s._v(" use the special DNS name "),t("code",[s._v("host.docker.internal")]),s._v(".")]),s._v(" "),t("h2",{attrs:{id:"traefik"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#traefik"}},[s._v("#")]),s._v(" Traefik")]),s._v(" "),t("p",[s._v("Extract access logs for a given date time: "),t("code",[s._v('cat access.log | grep "10/Mar/2020:02" > access-10-03-2020-03.log')]),s._v("\nCheck access logs for a given HTTP error code: "),t("code",[s._v('cat access.log | grep "1.0\\" 404"')]),s._v(" or "),t("code",[s._v('cat access.log | grep "2.0\\" 404"')]),s._v("\nGzip access logs: "),t("code",[s._v("gzip -c access.log > access.log.gz")])]),s._v(" "),t("h2",{attrs:{id:"scaleway"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scaleway"}},[s._v("#")]),s._v(" Scaleway")]),s._v(" "),t("p",[s._v("A "),t("a",{attrs:{href:"https://gist.github.com/cnouguier/a1ecc88f67819a610ae8e4d221789a8c",target:"_blank",rel:"noopener noreferrer"}},[s._v("step-by-step configuration"),t("OutboundLink")],1),s._v(" of a new server with Docker and a single logical volume.")]),s._v(" "),t("h2",{attrs:{id:"networking"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#networking"}},[s._v("#")]),s._v(" Networking")]),s._v(" "),t("p",[s._v("List all running ssh sessions: "),t("code",[s._v("netstat -tnpa | grep 'ESTABLISHED.*sshd'")])]),s._v(" "),t("p",[s._v("List all ssh session attempts: "),t("code",[s._v("cat /var/log/auth.log")])]),s._v(" "),t("h3",{attrs:{id:"development-domains"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-domains"}},[s._v("#")]),s._v(" Development domains")]),s._v(" "),t("p",[s._v("Some development tasks like OAuth2 authentication have strict security concerns so that you cannot use "),t("code",[s._v("localhost")]),s._v(', non-standard ports or need to enforce HTTPS in all URLs. Here is how to setup a "fake" domain on your host.')]),s._v(" "),t("p",[s._v("Let's say we have our app running on "),t("code",[s._v("localhost:8080")]),s._v(" in HTTP or "),t("code",[s._v("localhost:8083")]),s._v(" in HTTPS. First, edit the "),t("code",[s._v("hosts")]),s._v(" file ("),t("em",[s._v("/etc/hosts")]),s._v(" under Linux or "),t("em",[s._v("C:\\Windows\\System32\\drivers\\etc\\hosts")]),s._v(" under Windows) and add this line to redirect the domain to local host:")]),s._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("127.0.0.1 test.airbusoidc.com\n")])])]),t("p",[s._v("Then, since the "),t("code",[s._v("hosts")]),s._v(" file does not allow to manage port redirections we need to do so using the operating system network tools.")]),s._v(" "),t("h4",{attrs:{id:"windows"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#windows"}},[s._v("#")]),s._v(" Windows")]),s._v(" "),t("p",[s._v("To see what is currently running:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[s._v("netstat")]),s._v(" -a -n -p TCP "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("grep")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"LISTENING"')]),s._v("\n")])])]),t("p",[s._v("To add port redirection for HTTP:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("netsh interface portproxy "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" v4tov4 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listenport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listenaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("connectport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("connectaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\n")])])]),t("p",[s._v("To add port redirection for HTTPS:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("netsh interface portproxy "),t("span",{pre:!0,attrs:{class:"token function"}},[s._v("add")]),s._v(" v4tov4 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listenport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("443")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listenaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("connectport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8083")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("connectaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\n")])])]),t("p",[s._v("To see running proxied port:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("netsh interface portproxy show v4tov4\n")])])]),t("p",[s._v("To see remove proxied port:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("netsh interface portproxy delete v4tov4 "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listenport")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token assign-left variable"}},[s._v("listenaddress")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1\n")])])]),t("h4",{attrs:{id:"linux"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#linux"}},[s._v("#")]),s._v(" Linux")]),s._v(" "),t("p",[s._v("First enable port redirection:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token builtin class-name"}},[s._v("echo")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[s._v('"1"')]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" /proc/sys/net/ipv4/ip_forward\n")])])]),t("p",[s._v("Then add port redirect:")]),s._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[s._v("iptables -t nat -A PREROUTING -s "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 -p tcp --dport "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" -j REDIRECT --to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),t("span",{pre:!0,attrs:{class:"token variable"}},[t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")]),s._v("\niptables -t nat -A OUTPUT -s "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("127.0")]),s._v(".0.1 -p tcp --dport "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("80")]),s._v(" -j REDIRECT --to "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("8080")]),t("span",{pre:!0,attrs:{class:"token variable"}},[s._v("`")])]),s._v("\n")])])]),t("p",[s._v("To remove simply replace in the previous command the "),t("code",[s._v("-D")]),s._v(" switch instead of the "),t("code",[s._v("-A")]),s._v(" switch.")])])}),[],!1,null,null,null);a.default=r.exports}}]);