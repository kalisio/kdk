import{_ as e,c as a,o as t,V as r}from"./chunks/framework.MC2QjGNi.js";const o="/kdk/assets/users-data-model.sh7I96zd.svg",g=JSON.parse('{"title":"Data model","description":"","frontmatter":{},"headers":[],"relativePath":"architecture/data-model-view.md","filePath":"architecture/data-model-view.md"}'),s={name:"architecture/data-model-view.md"},i=r('<h1 id="data-model" tabindex="-1">Data model <a class="header-anchor" href="#data-model" aria-label="Permalink to &quot;Data model&quot;">​</a></h1><p>According to the <a href="https://docs.feathersjs.com/guides/about/philosophy.html" target="_blank" rel="noreferrer">Feathers philosophy</a> each data model is manipulated using a <a href="https://docs.feathersjs.com/api/services.html" target="_blank" rel="noreferrer">service interface</a> to perform <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" rel="noreferrer">CRUD operations</a> of the <a href="https://docs.feathersjs.com/api/databases/common.html" target="_blank" rel="noreferrer">persistence layer</a>. So this data model-oriented view is a service-oriented view in the same manner.</p><p>Because data models internally rely on <a href="http://www.json.org/" target="_blank" rel="noreferrer">JSON</a> they are by nature hierarchical. In the following example diagrams each nested JSON object is represented as a smaller <em>bubble</em> in a bigger <em>bubble</em> (the nesting/parent object), the data model instance being the root JSON object or the <em>biggest</em> bubble. The name of the bubble is the name of the nesting object property owing the nested object.</p><p>Data models are dynamic by nature, allowing any plugin to add custom fields whenever required using <a href="https://docs.feathersjs.com/api/hooks.html" target="_blank" rel="noreferrer">hooks</a>. Each data model includes an implicit <a href="https://mongodb.github.io/node-mongodb-native/api-bson-generated/objectid.html" target="_blank" rel="noreferrer">ObjectID</a> <code>_id</code> field provided by the database.</p><h2 id="user-data-model" tabindex="-1">User data model <a class="header-anchor" href="#user-data-model" aria-label="Permalink to &quot;User data model&quot;">​</a></h2><p>The most common properties of a user are described by the following data model:</p><p><img src="'+o+'" alt="User data model"></p><p>The details of each property are the following:</p><ul><li><strong>email</strong> : user e-mail used as an internal unique ID</li><li><strong>password</strong> : hashed user password</li><li><strong>locale</strong> : user locale when registering</li><li><strong>previousPasswords</strong> : hashed user password history if <a href="./../guides/basics/step-by-step.html#configuring-the-app">password policy has been enabled</a></li><li><strong>profile</strong> : user profile information including name</li><li><strong>[provider]</strong> : user profile information for associated OAuth provider, e.g. <code>google</code></li><li><strong>[scope]</strong> : user permissions for associated scope, e.g. <code>groups</code></li><li><strong>subscriptions</strong> : user web push subscriptions if any</li></ul><h2 id="subscription-data-model" tabindex="-1">Subscription data model <a class="header-anchor" href="#subscription-data-model" aria-label="Permalink to &quot;Subscription data model&quot;">​</a></h2><p>As per <a href="https://github.com/kalisio/feathers-webpush" target="_blank" rel="noreferrer">feathers-webpush</a>, subscriptions are attached to users through the <code>subscriptions</code> property.</p><h2 id="notification-data-model" tabindex="-1">Notification data model <a class="header-anchor" href="#notification-data-model" aria-label="Permalink to &quot;Notification data model&quot;">​</a></h2><p>As per <a href="https://github.com/kalisio/feathers-webpush" target="_blank" rel="noreferrer">feathers-webpush</a>, notifications are sent according to subscriptions are attached to users.</p><p>This data model is manipulated through the <a href="./../api/core/services.html#push-service">push service</a>.</p>',14),n=[i];function d(l,h,c,p,m,u){return t(),a("div",null,n)}const f=e(s,[["render",d]]);export{g as __pageData,f as default};
