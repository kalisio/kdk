import{_ as e,c as s,o as i,V as t}from"./chunks/framework.MC2QjGNi.js";const u=JSON.parse('{"title":"Services","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/utilities/utils.services.md","filePath":"api/core/utilities/utils.services.md"}'),n={name:"api/core/utilities/utils.services.md"},a=t(`<h1 id="services" tabindex="-1">Services <a class="header-anchor" href="#services" aria-label="Permalink to &quot;Services&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This module provides helper functions to manage recurring tasks on services like binding and unbinding event listeners to track real-time events such as <code>created</code>, <code>updated</code>, <code>patched</code>, and <code>removed</code>.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="listentoserviceevents-service-options-listeners" tabindex="-1"><code>listenToServiceEvents(service, options, listeners)</code> <a class="header-anchor" href="#listentoserviceevents-service-options-listeners" aria-label="Permalink to &quot;\`listenToServiceEvents(service, options, listeners)\`&quot;">​</a></h3><p>Binds event listeners to a service and stores them in an object.</p><ul><li><strong>Parameters:</strong><ul><li><code>service</code> <em>(string | Object)</em>: The service instance or name.</li><li><code>options</code> *(string | Object, optional)**: <ul><li><code>context</code> <em>(Object, optional)</em>: Context for retrieving the service if <code>service</code> is a string.</li><li><code>created</code> <em>(Function, optional)</em>: Listener for the <code>created</code> event.</li><li><code>updated</code> <em>(Function, optional)</em>: Listener for the <code>updated</code> event.</li><li><code>patched</code> <em>(Function, optional)</em>: Listener for the <code>patched</code> event.</li><li><code>removed</code> <em>(Function, optional)</em>: Listener for the <code>removed</code> event.</li><li><code>all</code> <em>(Function, optional)</em>: Listener for all events when no other is given (<code>created</code>, <code>updated</code>, <code>patched</code>, <code>removed</code>).</li></ul></li><li><code>listeners</code> <em>(Object, optional)</em>: The previous object returned from <code>listenToServiceEvents</code>, containing event handlers to unbind first.</li></ul></li><li><strong>Returns:</strong><ul><li>An object containing the service and the provided listeners.</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Notes</p><ul><li>If <code>service</code> is a string, it is resolved using <code>api.getService(service, context)</code>.</li><li>The <code>all</code> option applies the same function to all event types.</li></ul></div><h3 id="unlistentoserviceevents-listeners" tabindex="-1"><code>unlistenToServiceEvents(listeners)</code> <a class="header-anchor" href="#unlistentoserviceevents-listeners" aria-label="Permalink to &quot;\`unlistenToServiceEvents(listeners)\`&quot;">​</a></h3><p>Unbinds previously stored listeners from a service.</p><p>After calling <code>unlistenToServiceEvents</code>, the service will no longer trigger the specified event listeners.</p><ul><li><strong>Parameters:</strong><ul><li><code>listeners</code> <em>(Object)</em>: The object returned from <code>listenToServiceEvents</code>, containing event handlers.</li></ul></li></ul><div class="tip custom-block"><p class="custom-block-title">Note</p><p>Calling <code>unlistenToServiceEvents</code> is necessary to prevent memory leaks when event listeners are no longer needed.</p></div><h2 id="usage" tabindex="-1">Usage <a class="header-anchor" href="#usage" aria-label="Permalink to &quot;Usage&quot;">​</a></h2><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { listenToServiceEvents, unlistenToServiceEvents } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;./utils&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> listeners</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> listenToServiceEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  created</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User created:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data),</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  updated</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;User updated:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Later, when no longer needed</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">unlistenToServiceEvents</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(listeners)</span></span></code></pre></div>`,15),l=[a];function o(r,c,d,h,p,k){return i(),s("div",null,l)}const E=e(n,[["render",o]]);export{u as __pageData,E as default};
