import{_ as o,c as e,o as t,V as l}from"./chunks/framework.MC2QjGNi.js";const p=JSON.parse('{"title":"Colors","description":"","frontmatter":{},"headers":[],"relativePath":"api/core/utilities/utils.colors.md","filePath":"api/core/utilities/utils.colors.md"}'),r={name:"api/core/utilities/utils.colors.md"},a=l('<h1 id="colors" tabindex="-1">Colors <a class="header-anchor" href="#colors" aria-label="Permalink to &quot;Colors&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>The <code>utils.colors.js</code> module provides utilities for managing and manipulating colors.</p><p>It leverages external libraries such as <code>lodash</code>, <code>loglevel</code>, <code>quasar</code>, and <code>chroma-js</code> for efficient color handling.</p><h2 id="constants" tabindex="-1">Constants <a class="header-anchor" href="#constants" aria-label="Permalink to &quot;Constants&quot;">​</a></h2><h3 id="htmlcolors" tabindex="-1"><code>HtmlColors</code> <a class="header-anchor" href="#htmlcolors" aria-label="Permalink to &quot;`HtmlColors`&quot;">​</a></h3><p>A collection of standard HTML color names mapped to their corresponding hex values.</p><h3 id="colors-1" tabindex="-1"><code>Colors</code> <a class="header-anchor" href="#colors-1" aria-label="Permalink to &quot;`Colors`&quot;">​</a></h3><p>A predefined palette of commonly used colors, including primary and secondary shades.</p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-label="Permalink to &quot;Functions&quot;">​</a></h2><h3 id="gethtmlcolor-color-defaultcolor" tabindex="-1"><strong><code>getHtmlColor(color, defaultColor)</code></strong> <a class="header-anchor" href="#gethtmlcolor-color-defaultcolor" aria-label="Permalink to &quot;**`getHtmlColor(color, defaultColor)`**&quot;">​</a></h3><p>Retrieves the HTML color code for a given color name. If the color is not found, it falls back to a default color or tries to get it from Quasar&#39;s color palette.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><code>color</code> <em>(string)</em>: The color name or hex code to retrieve.</li><li><code>defaultColor</code> <em>(string)</em>: The fallback color if the input color is not found.</li></ul></li><li><p><strong>Returns:</strong></p><ul><li><em>(string)</em>: The corresponding hex code of the color.</li></ul></li></ul><h3 id="getpalettefromcolor-color-nearestifnotfound-false" tabindex="-1"><strong><code>getPaletteFromColor(color, nearestIfNotFound = false)</code></strong> <a class="header-anchor" href="#getpalettefromcolor-color-nearestifnotfound-false" aria-label="Permalink to &quot;**`getPaletteFromColor(color, nearestIfNotFound = false)`**&quot;">​</a></h3><p>Finds a matching color name from the predefined palette. If not found, it can return the closest available color (if <code>nearestIfNotFound</code> is <code>true</code>) or default to white.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><code>color</code> <em>(string)</em>: The color name or hex code to look up.</li><li><code>nearestIfNotFound</code> <em>(boolean, default: false)</em>: Whether to return the closest matching color if an exact match is not found.</li></ul></li><li><p><strong>Returns:</strong></p><ul><li><em>(string)</em>: The corresponding color name from the palette or the closest match.</li></ul></li></ul><h3 id="getcolorfrompalette-color" tabindex="-1"><strong><code>getColorFromPalette(color)</code></strong> <a class="header-anchor" href="#getcolorfrompalette-color" aria-label="Permalink to &quot;**`getColorFromPalette(color)`**&quot;">​</a></h3><p>Returns the RGB color code for a given palette color. If the input is already an RGB color (in <code>#</code> format), it returns the same value; otherwise, it fetches the corresponding color from the palette or defaults to white.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><code>color</code> <em>(string)</em>: The color name or hex code to retrieve.</li></ul></li><li><p><strong>Returns:</strong></p><ul><li><em>(string)</em>: The corresponding RGB hex code of the color.</li></ul></li></ul><h3 id="getcontrastcolor-color-light-white-dark-black" tabindex="-1"><strong><code>getContrastColor(color, light = &#39;white&#39;, dark = &#39;black&#39;)</code></strong> <a class="header-anchor" href="#getcontrastcolor-color-light-white-dark-black" aria-label="Permalink to &quot;**`getContrastColor(color, light = &#39;white&#39;, dark = &#39;black&#39;)`**&quot;">​</a></h3><p>Determines the best contrasting color (defaulting to white or black) based on the luminance of the given color. If the color is dark (low luminance), it returns the light color; if the color is light (high luminance), it returns the dark color.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><code>color</code> <em>(string)</em>: The color name or hex code to analyze.</li><li><code>light</code> <em>(string, default: &#39;white&#39;)</em>: The color to return if the input color is dark.</li><li><code>dark</code> <em>(string, default: &#39;black&#39;)</em>: The color to return if the input color is light.</li></ul></li><li><p><strong>Returns:</strong></p><ul><li><em>(string)</em>: The most contrasting color (<code>light</code> or <code>dark</code>).</li></ul></li></ul><h3 id="findclosestcolor-color-private-function" tabindex="-1"><strong><code>findClosestColor(color)</code></strong> <em>(Private function)</em> <a class="header-anchor" href="#findclosestcolor-color-private-function" aria-label="Permalink to &quot;**`findClosestColor(color)`** *(Private function)*&quot;">​</a></h3><p>Finds the closest matching color in the predefined palette using <code>chroma-js</code>&#39;s color difference (<code>deltaE</code>) algorithm.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><code>color</code> <em>(string)</em>: The color name or hex code to match.</li></ul></li><li><p><strong>Returns:</strong></p><ul><li><em>(string | null)</em>: The closest matching color name from the palette, or <code>null</code> if no match is found.</li></ul></li></ul><h3 id="buildcolorscale-options" tabindex="-1"><strong><code>buildColorScale(options)</code></strong> <a class="header-anchor" href="#buildcolorscale-options" aria-label="Permalink to &quot;**`buildColorScale(options)`**&quot;">​</a></h3><p>Creates a color scale using <code>chroma-js</code>, supporting:</p><ul><li>Predefined color sets</li><li>Class-based distributions</li><li>Optional domain scaling</li></ul><p>If no colors are provided, it defaults to the <code>&quot;Spectral&quot;</code> color scheme.</p><ul><li><p><strong>Parameters:</strong></p><ul><li><code>options</code> <em>(object)</em>: Configuration options for the color scale. <ul><li><code>colors</code> <em>(string | array)</em>: The color scale to use.</li><li><code>classes</code> <em>(array | number, optional)</em>: Class breaks for discrete scales.</li><li><code>domain</code> <em>(array, optional)</em>: Domain values for the scale.</li></ul></li></ul></li><li><p><strong>Returns:</strong></p><ul><li><em>(function)</em>: A <code>chroma-js</code> scale function based on the provided options.</li></ul></li></ul>',30),i=[a];function c(s,n,d,h,u,m){return t(),e("div",null,i)}const g=o(r,[["render",c]]);export{p as __pageData,g as default};
